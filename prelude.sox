;; Some useful aliases

; aliased from core builtins
(core/def {catch def error eval if load print println show \ =} 
  core/catch core/def core/error core/eval core/if core/load core/print core/println core/show core/\ core/=)

; alias from equality builtins
(core/def {== != > < >= <=} eq/== eq/!= ord/< ord/> ord/>= ord/<=)

; aliased from list builtins
(core/def {list head tail join} list/list list/head list/tail list/join)

; aliased from math builtins
(core/def {+ - * /} math/+ math/- math/* math//)

;;; Atoms
(def {nil} {})
(def {true} #t)
(def {false} #f)

(def {fun} (\ "(fun args doc body)\nDefines a new function named after the head of args" {f c b} {
  def (head f) (\ c (tail f) b)
}))

(def {fun-no-doc} (\ "(fun-no-doc args body)\nDefines a new function named after the head of args" {f b} {
  def (head f) (\ (tail f) b)
}))

(load "functional.sox")
(load "logical.sox")
(load "numeric.sox")
(load "cond.sox")

;;; Misc Functions

(fun {flip f a b} "(flip f a b)\nflip the arguments a and b of the given function f" {f b a})
(fun {ghost & xs} "(ghost & xs)\ndrop first argument and evaluate" {eval xs})
(fun {comp f g x} "(comp f g x)\napply f to the result of g applied to x" {f (g x)})

(load "list.sox")

;;; Other Fun

; Fibonacci
(fun {fib n} "(fib n)\nthe nth number in the fibonacci sequence" {
  select
    { (== n 0) 0 }
    { (== n 1) 1 }
    { otherwise (+ (fib (- n 1)) (fib (- n 2))) }
})

(load "test.sox")
(load "tests/sanity.sox")

(if is-interactive {load "showbanner.sox"} {})

