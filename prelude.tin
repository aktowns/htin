;;; Atoms
(def {nil} {})
(def {true} #t)
(def {false} #f)

;;; Functional Functions

; Function Definitions
(def {fun} (\ "(fun args doc body)\nDefines a new function named after the head of args" {f c b} {
  def (head f) (\ c (tail f) b)
}))

(def {fun-no-doc} (\ "(fun-no-doc args body)\nDefines a new function named after the head of args" {f b} {
  def (head f) (\ (tail f) b)
}))

(fun {add x y}
  "Adds two numbers together"
  {+ x y})

; Open new scope
(fun {let b} "(let body)\nintroduces a new scope" {
  ((\ {_} b) ())
})

; Unpack List to Function
(fun {unpack f l} "(unpack f l)\nunpacks the given list l and calls it as arguments to function f" {
  eval (join (list f) l)
})

; Unapply List to Function
(fun {pack f & xs} "(pack f & xs)\nhands the varargs xs to the function f as a list" {f xs})

; Curried and Uncurried calling
(def {curry} unpack)
(def {uncurry} pack)

; Perform Several things in Sequence
(fun {do & l} "(do & l)\nPerform the given varadic argument list l in sequence" {
  if (== l nil)
    {nil}
    {last l}
})

;;; Logical Functions

; Logical Functions
(fun {not x} 
  "(not x)\nreturn the inverse of x"
  {if x {#f} {#t}})
(fun {or x y} 
  "(or x y)\nreturn wether either x or y is #t"  
  {if x {#t} {if y {#t} {#f}}})
(fun {and x y} 
  "(and x y)\nreturn #t if both x and y are true" 
  {if x {if y {#t} {#f}} {#f}})

;;; Numeric Functions

; Minimum of Arguments
(fun {min & xs} "(min & xs)\nreturn the minimum of all given numbers" {
  if (== (tail xs) nil) {fst xs}
    {do 
      (= {rest} (unpack min (tail xs)))
      (= {item} (fst xs))
      (if (< item rest) {item} {rest})
    }
})

; Maximum of Arguments
(fun {max & xs} "(max & xs)\nreturn the maximum of all given numbers" {
  if (== (tail xs) nil) {fst xs}
    {do 
      (= {rest} (unpack max (tail xs)))
      (= {item} (fst xs))
      (if (> item rest) {item} {rest})
    }  
})

;;; Conditional Functions

(fun {select & cs} "(select & cs)\ntakes two or more 2 element lists selecting the second element of the first list with a positive head" {
  if (== cs nil)
    {error "No Selection Found"}
    {if (fst (fst cs)) {snd (fst cs)} {unpack select (tail cs)}}
})

(fun {case x & cs} "(case x & cs)\ntakes two or more 2 element lists selecting the second element of the first list to match x" {
  if (== cs nil)
    {error "No Case Found"}
    {if (== x (fst (fst cs))) {snd (fst cs)} {
	  unpack case (join (list x) (tail cs))}}
})

(def {otherwise} true)

;;; Misc Functions

(fun {flip f a b} "(flip f a b)\nflip the arguments a and b of the given function f" {f b a})
(fun {ghost & xs} "(ghost & xs)\ndrop first argument and evaluate" {eval xs})
(fun {comp f g x} "(comp f g x)\napply f to the result of g applied to x" {f (g x)})

;;; List Functions

; First, Second, or Third Item in List
(fun {fst l} "(fst l)\nreturn the first item in a list" { eval (head l) })
(fun {snd l} "(snd l)\nreturn the second item in a list" { eval (head (tail l)) })
(fun {trd l} "(trd l)\nreturn the third item in a list" { eval (head (tail (tail l))) })

; List Length
(fun {len l} "(len l)\nreturn the length of list n" {
  if (== l nil)
    {0}
    {+ 1 (len (tail l))}
})

; Nth item in List
(fun {nth n l} "(nth n l)\nreturn the nth n item in the list l" {
  if (== n 0)
    {fst l}
    {nth (- n 1) (tail l)}
})

; Last item in List
(fun {last l} "(last l)\nreturn the last item in list l" {nth (- (len l) 1) l})

; Apply Function to List
(fun {map f l} "(map f l)\nApply the given function f to the list l" {
  if (== l nil)
    {nil}
    {join (list (f (fst l))) (map f (tail l))}
})

; Apply Filter to List
(fun {filter f l} "(filter f l)\nfilter the given list l with function f" {
  if (== l nil)
    {nil}
    {join (if (f (fst l)) {head l} {nil}) (filter f (tail l))}
})

; Return all of list but last element
(fun {init l} "(init l)\nreturn all elements in list l except the last element" {
  if (== (tail l) nil)
    {nil}
    {join (head l) (init (tail l))}
})

; Reverse List
(fun {reverse l} "(reverse l)\nreturn the list l with the element order reversed" {
  if (== l nil)
    {nil}
    {join (reverse (tail l)) (head l)}
})

; Fold Left
(fun {foldl f z l} "(foldl f z l)\nfold list l left by applying function f, starting with initial value z" {
  if (== l nil) 
    {z}
    {foldl f (f z (fst l)) (tail l)}
})

; Fold Right
(fun {foldr f z l} "(foldr f z l)\nfold list l right by applying function f, starting with initial value z" {
  if (== l nil) 
    {z}
    {f (fst l) (foldr f z (tail l))}
})

(fun {sum l} "(sum l)\nSum of all numbers in list l" {foldl + 0 l})
(fun {product l} "(product l)\nProduct of all numbers in list l" {foldl * 1 l})

; Take N items
(fun {take n l} "(take n l)\ntake n items from list l" {
  if (== n 0)
    {nil}
    {join (head l) (take (- n 1) (tail l))}
})

; Drop N items
(fun {drop n l} "(drop n l)\ndrop n items from list l" {
  if (== n 0)
    {l}
    {drop (- n 1) (tail l)}
})

; Split at N
(fun {split n l} "(split n l)\nsplit list l at intersection n" {list (take n l) (drop n l)})

; Take While
(fun {take-while f l} "(take-while f l)\ntake items from list l while function f is true" {
  if (not (unpack f (head l)))
    {nil}
    {join (head l) (take-while f (tail l))}
})

; Drop While
(fun {drop-while f l} "(drop-while f l)\ndrop elements from list l while function f is true" {
  if (not (unpack f (head l)))
    {l}
    {drop-while f (tail l)}
})

; Element of List
(fun {elem x l} "(elem x l)\nreturns true of element x is in list l" {
  if (== l nil)
    {false}
    {if (== x (fst l)) {true} {elem x (tail l)}}
})

; Find element in list of pairs
(fun {lookup x l} "(lookup x l)\nfind the item x and return its paired value in a list of pairs" {
  if (== l nil)
    {error "No Element Found"}
    {do
      (= {key} (fst (fst l)))
      (= {val} (snd (fst l)))
      (if (== key x) {val} {lookup x (tail l)})
    }
})

; Zip two lists together into a list of pairs
(fun {zip x y} "(zip x y)\nzip two lists together into a list of pairs" {
  if (or (== x nil) (== y nil))
    {nil}
    {join (list (join (head x) (head y))) (zip (tail x) (tail y))}
})

; Unzip a list of pairs into two lists
(fun {unzip l} "(unzip x y)\nunzip a list of pairs into two lists" {
  if (== l nil)
    {{nil nil}}
    {do
      (= {x} (fst l))
      (= {xs} (unzip (tail l)))
      (list (join (head x) (fst xs)) (join (tail x) (snd xs)))
    }
})

;;; Other Fun

; Fibonacci
(fun {fib n} "(fib n)\nthe nth number in the fibonacci sequence" {
  select
    { (== n 0) 0 }
    { (== n 1) 1 }
    { otherwise (+ (fib (- n 1)) (fib (- n 2))) }
})

(do 
  (= {fh} (file/open "banner.txt" file/read-mode))
  (print (file/read fh))
  (= {str-version} (map show version))
  (= {started-on} (join "session started on: " (datetime/current)))
  (= {host-info} (join "Your host is running " (sys/os) "/" (sys/arch) " and was compiled with " (sys/compiler) " " (sys/compiler-version)))
  (print "Version:" (join (fst str-version) "." (snd str-version) "." (trd str-version) " \"Nakatomi Plaza\" " started-on))
  (print host-info)
  (file/close fh))
 
